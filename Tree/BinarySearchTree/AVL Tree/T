Material-https://www.youtube.com/playlist?list=PLAuemBFSZV1oE256PESc8ku8MX3xMQYJF

Code-----------------------------------------------------------------------------

class Node {
    int data;
    Node left, right;

    Node(int value) {
        data = value;
        left = right = null;
    }
}

public class BinarySearchTree {
    Node root;



    public Node insert(Node root, int value) {
        if (root == null) {
            root = new Node(value);
            return root;
        }
        if (value < root.data)
            root.left = insert(root.left, value);
        else if (value > root.data)
            root.right = insert(root.right, value);
        return root;
    }

    // SEARCH
    public boolean search(Node root, int value) {
        if (root == null) return false;
        if (root.data == value) return true;
        return value < root.data ? search(root.left, value) : search(root.right, value);
    }

    // FIND MINIMUM
    public int findMin(Node root) {
        while (root.left != null) root = root.left;
        return root.data;
    }

    // DELETION
    public Node delete(Node root, int value) {
        if (root == null) return root;

        if (value < root.data)
            root.left = delete(root.left, value);
        else if (value > root.data)
            root.right = delete(root.right, value);
        else {
            if (root.left == null) return root.right;
            else if (root.right == null) return root.left;

            root.data = findMin(root.right);  // inorder successor
            root.right = delete(root.right, root.data);
        }
        return root;
    }

    // INORDER (Left, Root, Right)
    public void inorder(Node root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.data + " ");
            inorder(root.right);
        }
    }

    // PREORDER (Root, Left, Right)
    public void preorder(Node root) {
        if (root != null) {
            System.out.print(root.data + " ");
            preorder(root.left);
            preorder(root.right);
        }
    }

    // POSTORDER (Left, Right, Root)
    public void postorder(Node root) {
        if (root != null) {
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.data + " ");
        }
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();

        bst.root = bst.insert(bst.root, 50);
        bst.insert(bst.root, 30);
        bst.insert(bst.root, 20);
        bst.insert(bst.root, 40);
        bst.insert(bst.root, 70);
        bst.insert(bst.root, 60);
        bst.insert(bst.root, 80);

        System.out.println("Inorder Traversal:");
        bst.inorder(bst.root);

        System.out.println("\nPreorder Traversal:");
        bst.preorder(bst.root);

        System.out.println("\nPostorder Traversal:");
        bst.postorder(bst.root);

        System.out.println("\nMinimum Value:");
        System.out.println(bst.findMin(bst.root));

        System.out.println("Search 40: " + bst.search(bst.root, 40));

        bst.root = bst.delete(bst.root, 20);
        System.out.println("\nInorder after deletion of 20:");
        bst.inorder(bst.root);
    }
}
